import { ITest, IUtil, IUtilities } from '../types/iquest';
export declare const INDEFINITE = 1;
export declare const DEFINITE = 2;
export declare const COUNT = 3;
export declare const NULL_FUNC: () => void;
export declare const test: ITest;
export declare const log: {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare function runCmd(cmd: any): void;
export declare function doOnce(o: any, s: any): boolean;
export declare function printOrRun(char: any, item: any, attname: any, options: any): any;
export declare function verbify(s: any): any;
export declare function sentenceCase(str: any): any;
export declare function titleCase(str: any): any;
export declare function spaces(n: any): string;
export declare function formatList(itemArray: any, options: any): any;
export declare function toRoman(number: any): any;
export declare function displayMoney(n: any): string;
export declare function displayNumber(n: any, control: any): string;
export declare function getDir(s: any): string | false;
export declare const array: {
    clone(ary: any, options: any): unknown[];
    combos(ary: any, sep?: string): any[];
    compare(a: any, b: any): boolean;
    compareUnordered(a: any, b: any): boolean;
    filterByAttribute(ary: any, attName: any, value: any): any;
    fromTokens(ary: any, scope: any, cmdParams: any): any[];
    hasMatch(ary: any, s: any): boolean;
    intersection(ary1: any, ary2: any): any;
    next(ary: any, el: any, circular: any): any;
    nextFlagged(ary: any, el: any, att: any, circular: any): any;
    oneFromTokens(ary: any, scope: any, cmdParams?: {}): any;
    remove(ary: any, el: any): void;
    subtract(a: any, b: any): any[];
    value(ary: any, index: any, opt: any): any;
};
export declare function scopeReachable(): any[];
export declare function scopeHeldBy(chr?: import("../types/iquest").IPlayer, situation?: number): any;
export declare function scopeHereListed(): any[];
export declare function scopeHereParser(): any[];
export declare function scopeAllNpcHere(ignoreDark: any): any[];
export declare const util: IUtil;
export declare function respond(params: any, list: any, func: any): boolean;
export declare function getResponseList(params: any, list: any, result: any): any;
export declare const Utilities: IUtilities;
//# sourceMappingURL=_util.d.ts.map